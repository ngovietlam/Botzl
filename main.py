import json
import os
import threading
import time
import requests
# from flask import Flask, jsonify
from zlapi import ZaloAPI, ZaloAPIException
from zlapi.models import *
from colorama import Fore, Style, init
from googleapiclient.discovery import build
#from module import  handle_ping, handle_info, handle_say, handle_count
from config import imei, session_cookies
# T·∫°o Flask app cho keep-alive
# app = Flask(__name__)

# @app.route('/ping')
# def ping():
#     return jsonify({
#         'status': 'alive',
#         'message': 'Bot is running',
#         'timestamp': time.time()
#     })

# @app.route('/keep-alive')
# def keep_alive():
#     return jsonify({
#         'status': 'ok',
#         'uptime': time.time(),
#         'bot_status': 'running'
#     })

# @app.route('/')
# def home():
#     return jsonify({
#         'message': 'Zalo Bot Server',
#         'endpoints': ['/ping', '/keep-alive'],
#         'status': 'running'
#     })

# def run_flask():
#     """Ch·∫°y Flask server trong thread ri√™ng"""
#     app.run(host='0.0.0.0', port=8080, debug=False, use_reloader=False)

# def keep_alive_ping():
#     """G·ª≠i ping request ƒë·ªãnh k·ª≥ ƒë·ªÉ gi·ªØ server alive"""
#     # Thay YOUR_REPL_URL b·∫±ng URL th·ª±c t·∫ø c·ªßa Replit project
#     repl_url = "https://your-project-name.your-username.repl.co"

#     while True:
#         try:
#             time.sleep(300)  # ƒê·ª£i 5 ph√∫t
#             response = requests.get(f"{repl_url}/ping", timeout=10)
#             if response.status_code == 200:
#                 print(
#                     f"{Fore.GREEN}Keep-alive ping successful at {time.ctime()}"
#                 )
#             else:
#                 print(
#                     f"{Fore.YELLOW}Keep-alive ping failed with status: {response.status_code}"
#                 )
#         except requests.exceptions.RequestException as e:
#             print(f"{Fore.RED}Keep-alive ping error: {e}")
#         except Exception as e:
#             print(f"{Fore.RED}Unexpected error in keep-alive: {e}")


class CustomClient(ZaloAPI):

    def __init__(self, phone, password, imei, session_cookies):
        try:
            super().__init__(phone=phone,
                             password=password,
                             imei=imei,
                             session_cookies=session_cookies)
        except ZaloAPIException as e:
            print(f"{Fore.RED}L·ªói ƒëƒÉng nh·∫≠p Zalo: {e}")
            raise
        self.prefix = "!"
        self.excluded_user_ids = ['207754413506549669']
        self.data_file = 'user_data.json'
        self.message_counts = {}
        self.count_data = {}  # Th√™m bi·∫øn l∆∞u tr·ªØ count cho t·ª´ng user
        self.waiting_for_selection = {}
        # self.commands = {
        #     "help": {
        #         "desc": "Hi·ªÉn th·ªã danh s√°ch l·ªánh",
        #         "func": handle_help
        #     },
        #     "ping": {
        #         "desc": "Ki·ªÉm tra bot c√≥ ho·∫°t ƒë·ªông kh√¥ng",
        #         "func": handle_ping
        #     },
        #     "info": {
        #         "desc": "Hi·ªÉn th·ªã th√¥ng tin v·ªÅ bot",
        #         "func": handle_info
        #     },
        #     "say": {
        #         "desc": "L·∫∑p l·∫°i n·ªôi dung b·∫°n nh·∫≠p (!say <n·ªôi dung>)",
        #         "func": handle_say
        #     },
        #     "dem": {
        #         "desc": "TƒÉng s·ªë ƒë·∫øm c·ªßa b·∫°n l√™n 1",
        #         "func": handle_count
        #     },
        #     "check": {
        #         "desc": "Ki·ªÉm tra s·ªë ƒë·∫øm hi·ªán t·∫°i c·ªßa b·∫°n",
        #         "func": handle_count
        #     },
        #     "top": {
        #         "desc": "Xem b·∫£ng x·∫øp h·∫°ng ƒë·∫øm s·ªë",
        #         "func": handle_count
        #     },
        #     "reset": {
        #         "desc": "Reset t·∫•t c·∫£ count v·ªÅ 0 (ch·ªâ admin)",
        #         "func": handle_count
        #     }
        # }
        self.load_data()

    def load_data(self):
        try:
            with open(self.data_file, 'r') as f:
                data = json.load(f)
                self.message_counts = data.get('message_counts', {})
                self.count_data = data.get('count_data',
                                           {})  # T·∫£i d·ªØ li·ªáu count
        except (FileNotFoundError, json.JSONDecodeError):
            self.message_counts = {}
            self.count_data = {}

    def save_data(self):
        with open(self.data_file, 'w') as f:
            json.dump(
                {
                    'message_counts': self.message_counts,
                    'count_data': self.count_data  # L∆∞u d·ªØ li·ªáu count
                },
                f,
                indent=4)

    def update_message_count(self, thread_id, author_id):
        if thread_id not in self.message_counts:
            self.message_counts[thread_id] = {}
        if author_id not in self.message_counts[thread_id]:
            self.message_counts[thread_id][author_id] = 0
        self.message_counts[thread_id][author_id] += 1

    def initialize_count_for_user(self, thread_id, author_id):
        """Kh·ªüi t·∫°o count = 0 cho user n·∫øu ch∆∞a t·ªìn t·∫°i"""
        if thread_id not in self.count_data:
            self.count_data[thread_id] = {}
        if author_id not in self.count_data[thread_id]:
            self.count_data[thread_id][author_id] = 0

    def get_user_display_name(self, userId):
        """L·∫•y t√™n hi·ªÉn th·ªã c·ªßa user"""
        try:
            user_info = super().fetchUserInfo(userId)
            if isinstance(user_info, str):
                user_info = json.loads(user_info)
            if 'changed_profiles' in user_info and userId in user_info[
                    'changed_profiles']:
                zalo_name = user_info['changed_profiles'][userId].get(
                    'zaloName', None)
                return zalo_name or user_info['changed_profiles'][userId].get(
                    'displayName', 'Unknown')
            return 'Unknown'
        except Exception as e:
            print(f"{Fore.RED}L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: {e}")
            return 'Unknown'

    def fetchUserInfo(self, userId):
        try:
            user_info = super().fetchUserInfo(userId)
            if isinstance(user_info, str):
                user_info = json.loads(user_info)
            if 'changed_profiles' in user_info and userId in user_info[
                    'changed_profiles']:
                zalo_name = user_info['changed_profiles'][userId].get(
                    'zaloName', None)
                return zalo_name or user_info['changed_profiles'][userId].get(
                    'displayName', userId)
            return userId
        except Exception as e:
            print(f"{Fore.RED}L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: {e}")
            return userId

    # def handle_help(self,
    #                 message_object,
    #                 thread_id,
    #                 thread_type,
    #                 args,
    #                 author_id=None):
    #     response = "üìú **Danh s√°ch l·ªánh c·ªßa bot** üìú\n"
    #     for cmd, info in self.commands.items():
    #         response += f"**{self.prefix}{cmd}**: {info['desc']}\n"
    #     response += f"\nS·ª≠ d·ª•ng `{self.prefix}<l·ªánh>` ƒë·ªÉ g·ªçi bot!"
    #     self.send(Message(text=response), thread_id, thread_type)

    # def handle_ping(self,
    #                 message_object,
    #                 thread_id,
    #                 thread_type,
    #                 args,
    #                 author_id=None):
    #     self.send(Message(text="Pong! üèì Bot ƒëang ho·∫°t ƒë·ªông!"), thread_id,
    #               thread_type)

    # def handle_info(self,
    #                 message_object,
    #                 thread_id,
    #                 thread_type,
    #                 args,
    #                 author_id=None):
    #     response = "ü§ñ **Th√¥ng tin v·ªÅ bot** ü§ñ\n"
    #     response += "T√™n: Zalo Bot\nPhi√™n b·∫£n: 1.0\nT√°c gi·∫£: Your Name\nPrefix: !\nM√¥ t·∫£: Bot c∆° b·∫£n cho Zalo v·ªõi t√≠nh nƒÉng ƒë·∫øm s·ªë."
    #     self.send(Message(text=response), thread_id, thread_type)

    # def handle_say(self,
    #                message_object,
    #                thread_id,
    #                thread_type,
    #                args,
    #                author_id=None):
    #     if args:
    #         response = "üó£Ô∏è B·∫°n n√≥i: " + " ".join(args)
    #         self.send(Message(text=response), thread_id, thread_type)
    #     else:
    #         self.send(
    #             Message(text="Vui l√≤ng nh·∫≠p n·ªôi dung! V√≠ d·ª•: !say Xin ch√†o"),
    #             thread_id, thread_type)

    # def handle_dem(self,
    #                message_object,
    #                thread_id,
    #                thread_type,
    #                args,
    #                author_id=None):
    #     """X·ª≠ l√Ω l·ªánh !dem - tƒÉng count c·ªßa user l√™n 1"""
    #     try:
    #         # Kh·ªüi t·∫°o count cho user n·∫øu ch∆∞a t·ªìn t·∫°i
    #         self.initialize_count_for_user(thread_id, author_id)

    #         # TƒÉng count l√™n 1
    #         self.count_data[thread_id][author_id] += 1
    #         current_count = self.count_data[thread_id][author_id]

    #         # L·∫•y t√™n user
    #         user_name = self.get_user_display_name(author_id)

    #         # G·ª≠i th√¥ng b√°o
    #         response = f"üéØ {user_name} ƒë√£ ƒë·∫øm! S·ªë l·∫ßn ƒë·∫øm hi·ªán t·∫°i: {current_count}"
    #         self.send(Message(text=response), thread_id, thread_type)

    #         # L∆∞u d·ªØ li·ªáu
    #         self.save_data()

    #     except Exception as e:
    #         print(f"{Fore.RED}L·ªói x·ª≠ l√Ω l·ªánh dem: {e}")
    #         self.send(Message(text="C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh ƒë·∫øm!"),
    #                   thread_id, thread_type)

    # def handle_check(self,
    #                  message_object,
    #                  thread_id,
    #                  thread_type,
    #                  args,
    #                  author_id=None):
    #     """X·ª≠ l√Ω l·ªánh !check - ki·ªÉm tra count hi·ªán t·∫°i c·ªßa user"""
    #     try:
    #         # Kh·ªüi t·∫°o count cho user n·∫øu ch∆∞a t·ªìn t·∫°i
    #         self.initialize_count_for_user(thread_id, author_id)

    #         current_count = self.count_data[thread_id][author_id]
    #         user_name = self.get_user_display_name(author_id)

    #         # G·ª≠i th√¥ng b√°o
    #         response = f"üìä {user_name} ƒë√£ ƒë·∫øm t·ªïng c·ªông: {current_count} l·∫ßn"
    #         self.send(Message(text=response), thread_id, thread_type)

    #     except Exception as e:
    #         print(f"{Fore.RED}L·ªói x·ª≠ l√Ω l·ªánh check: {e}")
    #         self.send(Message(text="C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra s·ªë ƒë·∫øm!"),
    #                   thread_id, thread_type)

    # def handle_top(self,
    #                message_object,
    #                thread_id,
    #                thread_type,
    #                args,
    #                author_id=None):
    #     """X·ª≠ l√Ω l·ªánh !top - hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng"""
    #     try:
    #         if thread_id not in self.count_data or not self.count_data[
    #                 thread_id]:
    #             self.send(
    #                 Message(
    #                     text=
    #                     "üìä Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫øm n√†o trong cu·ªôc tr√≤ chuy·ªán n√†y!"
    #                 ), thread_id, thread_type)
    #             return

    #         # S·∫Øp x·∫øp theo count gi·∫£m d·∫ßn
    #         sorted_users = sorted(self.count_data[thread_id].items(),
    #                               key=lambda x: x[1],
    #                               reverse=True)

    #         # T·∫°o b·∫£ng x·∫øp h·∫°ng
    #         response = "üèÜ B·∫¢NG X·∫æP H·∫†NG ƒê·∫æM S·ªê üèÜ\n\n"

    #         for i, (user_id, count) in enumerate(sorted_users[:10]):  # Top 10
    #             user_name = self.get_user_display_name(user_id)
    #             medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else f"{i+1}."
    #             response += f"{medal} {user_name}: {count} l·∫ßn\n"

    #         self.send(Message(text=response), thread_id, thread_type)

    #     except Exception as e:
    #         print(f"{Fore.RED}L·ªói x·ª≠ l√Ω l·ªánh top: {e}")
    #         self.send(
    #             Message(text="C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng!"),
    #             thread_id, thread_type)

    # def handle_reset(self,
    #                  message_object,
    #                  thread_id,
    #                  thread_type,
    #                  args,
    #                  author_id=None):
    #     """X·ª≠ l√Ω l·ªánh !reset - reset t·∫•t c·∫£ count v·ªÅ 0 (ch·ªâ admin ho·∫∑c owner)"""
    #     try:
    #         # Danh s√°ch ID ƒë∆∞·ª£c ph√©p reset (thay b·∫±ng ID c·ªßa b·∫°n)
    #         authorized_users = ['5218488050389102343'
    #                             ]  # Th√™m ID c·ªßa b·∫°n v√† admin kh√°c

    #         if author_id not in authorized_users:
    #             self.send(Message(text="‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ reset count!"),
    #                       thread_id, thread_type)
    #             return

    #         # Reset t·∫•t c·∫£ count v·ªÅ 0
    #         if thread_id in self.count_data:
    #             for user_id in self.count_data[thread_id]:
    #                 self.count_data[thread_id][user_id] = 0
    #             self.save_data()
    #             self.send(Message(text="üîÑ ƒê√£ reset t·∫•t c·∫£ count v·ªÅ 0!"),
    #                       thread_id, thread_type)
    #         else:
    #             self.send(Message(text="üìä Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫øm n√†o ƒë·ªÉ reset!"),
    #                       thread_id, thread_type)

    #     except Exception as e:
    #         print(f"{Fore.RED}L·ªói x·ª≠ l√Ω l·ªánh reset: {e}")
    #         self.send(Message(text="C√≥ l·ªói x·∫£y ra khi reset count!"),
    #                   thread_id, thread_type)

    def onMessage(self, mid, author_id, message, message_object, thread_id,
                  thread_type):
        print(f"{Fore.GREEN}Received message:\n"
              f"- Message: {Style.BRIGHT}{message}{Style.NORMAL}\n"
              f"- Author ID: {Fore.CYAN}{author_id}\n"
              f"- Thread ID: {Fore.YELLOW}{thread_id}\n"
              f"- Thread Type: {Fore.BLUE}{thread_type}\n")

        try:
            self.update_message_count(thread_id, author_id)

            # Kh·ªüi t·∫°o count cho user khi h·ªç g·ª≠i tin nh·∫Øn l·∫ßn ƒë·∫ßu
            self.initialize_count_for_user(thread_id, author_id)

            if hasattr(message_object, 'content') and isinstance(
                    message_object.content, str):
                content = message_object.content.strip()
                if content.startswith(self.prefix):
                    command = content[len(self.prefix):].split()[0].lower(
                    ) if content[len(self.prefix):] else ""
                    args = content[len(self.prefix) +
                                   len(command):].strip().split()
                    if command in self.commands:
                        if author_id not in self.excluded_user_ids:
                            self.commands[command]["func"](self,
                                                           message_object,
                                                           thread_id,
                                                           thread_type, args,
                                                           author_id)
                        else:
                            self.send(
                                Message(
                                    text="B·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng bot!"),
                                thread_id, thread_type)
                    elif command:
                        self.send(
                            Message(
                                text=
                                f"L·ªánh `{self.prefix}{command}` kh√¥ng t·ªìn t·∫°i. G√µ `{self.prefix}help` ƒë·ªÉ xem danh s√°ch l·ªánh."
                            ), thread_id, thread_type)

            self.save_data()

        except Exception as ex:
            print(f"{Fore.RED}L·ªói x·ª≠ l√Ω tin nh·∫Øn: {ex}")
            self.send(Message(text=f"L·ªói: {str(ex)}"), thread_id, thread_type)

    def onGroupJoin(self, mid, added_ids, author_id, thread_id, **kwargs):
        """X·ª≠ l√Ω khi bot ƒë∆∞·ª£c th√™m v√†o nh√≥m ho·∫∑c c√≥ th√†nh vi√™n m·ªõi"""
        try:
            # Kh·ªüi t·∫°o count cho c√°c th√†nh vi√™n m·ªõi
            for user_id in added_ids:
                self.initialize_count_for_user(thread_id, user_id)

            # N·∫øu bot ƒë∆∞·ª£c th√™m v√†o nh√≥m, g·ª≠i th√¥ng b√°o ch√†o m·ª´ng
            if str(self.uid) in added_ids:
                welcome_msg = ("ü§ñ Xin ch√†o! T√¥i l√† bot ƒë·∫øm s·ªë!\n\n"
                               "üìù C√°c l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng:\n"
                               "‚Ä¢ !dem - TƒÉng s·ªë ƒë·∫øm c·ªßa b·∫°n\n"
                               "‚Ä¢ !check - Xem s·ªë ƒë·∫øm hi·ªán t·∫°i\n"
                               "‚Ä¢ !top - Xem b·∫£ng x·∫øp h·∫°ng\n"
                               "‚Ä¢ !reset - Reset t·∫•t c·∫£ (ch·ªâ admin)\n"
                               "‚Ä¢ !help - Xem t·∫•t c·∫£ l·ªánh\n\n"
                               "üéØ H√£y b·∫Øt ƒë·∫ßu ƒë·∫øm n√†o!")
                self.send(Message(text=welcome_msg), thread_id,
                          ThreadType.GROUP)

            self.save_data()

        except Exception as e:
            print(f"{Fore.RED}L·ªói x·ª≠ l√Ω s·ª± ki·ªán join group: {e}")

    def stop_listening(self):
        """D·ª´ng bot listener"""
        try:
            if hasattr(self, 'listening') and self.listening:
                self.listening = False
                print(f"{Fore.YELLOW}Bot ƒë√£ d·ª´ng listening")
        except Exception as e:
            print(f"{Fore.RED}L·ªói d·ª´ng bot: {e}")


def main():
    """H√†m main ƒë·ªÉ ch·∫°y bot tr·ª±c ti·∫øp"""
    def access_website_periodically():
        """Truy c·∫≠p website m·ªói 10 ph√∫t li√™n t·ª•c"""
        while True:
            time.sleep(600)  # 10 ph√∫t = 600 gi√¢y
            try:
                # Thay th·∫ø URL n√†y b·∫±ng website b·∫°n mu·ªën truy c·∫≠p
                website_url = "https://66dde611-6b38-4f72-b477-82cfd474e992-00-37jxjgthrls3.janeway.replit.dev/health"
                response = requests.get(website_url, timeout=10)
                utc8_time = time.strftime('%a %b %d %H:%M:%S %Y', time.localtime())
                if response.status_code == 200:
                    print(f"{Fore.GREEN}‚úÖ ƒê√£ truy c·∫≠p website th√†nh c√¥ng l√∫c {utc8_time}")
                else:
                    print(f"{Fore.YELLOW}‚ö†Ô∏è Truy c·∫≠p website th·∫•t b·∫°i v·ªõi status: {response.status_code}")
            except Exception as e:
                print(f"{Fore.RED}‚ùå L·ªói truy c·∫≠p website: {e}")

    # Kh·ªüi t·∫°o client
    client = CustomClient('api_key',
                          'secret_key',
                          imei=imei,
                          session_cookies=session_cookies)

    # Ch·∫°y thread truy c·∫≠p website ƒë·ªãnh k·ª≥
    website_thread = threading.Thread(target=access_website_periodically, daemon=True)
    website_thread.start()
    print(f"{Fore.CYAN}üïê ƒê√£ b·∫Øt ƒë·∫ßu truy c·∫≠p website m·ªói 10 ph√∫t...")

    # Ch·∫°y bot
    client.listen()

if __name__ == "__main__":
    main()