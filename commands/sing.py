from zlapi.models import Message
from colorama import Fore
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup
import os
from utils.youtube_downloader import download_mp3

def handle_sing(client, message_object, thread_id, thread_type, args, author_id):
    if not args:
        client.send(Message(text="Vui l√≤ng nh·∫≠p t·ª´ kh√≥a! V√≠ d·ª•: !sing m∆°"), thread_id, thread_type)
        return

    keyword = "sing " + " ".join(args)
    try:
        request = client.youtube.search().list(
            part="snippet",
            q=keyword,
            maxResults=5,
            type="video"
        )
        response = request.execute()

        if not response.get('items'):
            client.send(Message(text="Kh√¥ng t√¨m th·∫•y video n√†o!"), thread_id, thread_type)
            return

        videos = []
        response_text = "üéµ K·∫øt qu·∫£ t√¨m ki·∫øm YouTube üéµ\n"
        for idx, item in enumerate(response['items'], 1):
            title = item['snippet']['title']
            video_id = item['id']['videoId']
            videos.append({"title": title, "video_id": video_id})
            response_text += f"{idx}. {title}\n"

        response_text += "\nG·ª≠i s·ªë (1-5) ƒë·ªÉ ch·ªçn video v√† t·∫£i MP3!"
        client.send(Message(text=response_text), thread_id, thread_type)

        client.waiting_for_selection[thread_id] = {
            "author_id": author_id,
            "videos": videos,
            "state": "waiting_for_selection"
        }

    except Exception as e:
        client.send(Message(text=f"L·ªói t√¨m ki·∫øm YouTube: {str(e)}"), thread_id, thread_type)
        print(f"{Fore.RED}L·ªói x·ª≠ l√Ω !sing: {e}")

def get_y2mate_mp3_url(video_id):
    try:
        session = requests.Session()
        retries = Retry(total=3, backoff_factor=1, status_forcelist=[429, 500, 502, 503, 504])
        session.mount('https://', HTTPAdapter(max_retries=retries))
        
        # Truy c·∫≠p trang y2mate.nu
        youtube_url = f"https://www.youtube.com/watch?v={video_id}"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36'
        }
        response = session.get('https://y2mate.nu/en-00uN/', headers=headers, timeout=10)
        if response.status_code != 200:
            print(f"{Fore.RED}L·ªói truy c·∫≠p y2mate.nu: M√£ tr·∫°ng th√°i {response.status_code}")
            return None
        
        # M√¥ ph·ªèng g·ª≠i URL video
        soup = BeautifulSoup(response.text, 'html.parser')
        form = soup.find('form', {'id': 'search-form'})
        if not form:
            print(f"{Fore.RED}L·ªói: Kh√¥ng t√¨m th·∫•y form t√¨m ki·∫øm tr√™n y2mate.nu")
            return None
        
        # G·ª≠i y√™u c·∫ßu t√¨m ki·∫øm
        search_url = 'https://y2mate.nu/en-00uN/search'
        data = {
            'url': youtube_url,
            # C√≥ th·ªÉ c·∫ßn th√™m c√°c tr∆∞·ªùng ·∫©n t·ª´ form n·∫øu y2mate y√™u c·∫ßu
        }
        response = session.post(search_url, headers=headers, data=data, timeout=10)
        if response.status_code != 200:
            print(f"{Fore.RED}L·ªói t√¨m ki·∫øm tr√™n y2mate.nu: M√£ tr·∫°ng th√°i {response.status_code}")
            return None
        
        # L·∫•y link MP3
        soup = BeautifulSoup(response.text, 'html.parser')
        mp3_link = soup.find('a', {'class': 'download-btn', 'data-ftype': 'mp3'})
        if mp3_link and 'href' in mp3_link.attrs:
            mp3_url = mp3_link['href']
            print(f"{Fore.GREEN}L·∫•y URL MP3 t·ª´ y2mate.nu th√†nh c√¥ng: {mp3_url}")
            return mp3_url
        else:
            print(f"{Fore.RED}L·ªói: Kh√¥ng t√¨m th·∫•y link MP3 tr√™n y2mate.nu")
            return None
    except Exception as e:
        print(f"{Fore.RED}L·ªói khi l·∫•y MP3 t·ª´ y2mate.nu: {e}")
        return None

def handle_video_selection(client, message, message_object, thread_id, thread_type, author_id):
    if thread_id in client.waiting_for_selection and author_id == client.waiting_for_selection[thread_id]["author_id"]:
        if client.waiting_for_selection[thread_id]["state"] == "waiting_for_selection":
            try:
                choice = int(message.strip()) - 1
                videos = client.waiting_for_selection[thread_id]["videos"]
                if 0 <= choice < len(videos):
                    video_id = videos[choice]["video_id"]
                    title = videos[choice]["title"]
                    client.send(Message(text=f"ƒêang x·ª≠ l√Ω MP3: {title}..."), thread_id, thread_type)

                    # Ki·ªÉm tra video ID h·ª£p l·ªá
                    if not video_id or len(video_id) != 11:
                        client.send(Message(text="L·ªói: Video ID kh√¥ng h·ª£p l·ªá."), thread_id, thread_type)
                        return True

                    # Th·ª≠ l·∫•y URL MP3 t·ª´ y2mate.nu
                    mp3_url = get_y2mate_mp3_url(video_id)
                    file_size = None
                    session = requests.Session()
                    retries = Retry(total=3, backoff_factor=1, status_forcelist=[429, 500, 502, 503, 504])
                    session.mount('https://', HTTPAdapter(max_retries=retries))

                    # N·∫øu y2mate th·∫•t b·∫°i, th·ª≠ RapidAPI
                    if not mp3_url:
                        print(f"{Fore.YELLOW}Th·ª≠ RapidAPI v√¨ y2mate th·∫•t b·∫°i")
                        api_url = f"https://yt-mp3-api.p.rapidapi.com/download?video_id={video_id}"
                        headers = {
                            "X-RapidAPI-Key": "YOUR_RAPIDAPI_KEY",  # Thay b·∫±ng API key c·ªßa b·∫°n
                            "X-RapidAPI-Host": "yt-mp3-api.p.rapidapi.com"
                        }
                        response = session.get(api_url, headers=headers, timeout=10)
                        if response.status_code == 200:
                            data = response.json()
                            mp3_url = data.get('url') or data.get('download_url') or data.get('mp3_url')
                            if mp3_url:
                                print(f"{Fore.GREEN}L·∫•y URL MP3 t·ª´ RapidAPI th√†nh c√¥ng")
                            else:
                                print(f"{Fore.RED}L·ªói: Ph·∫£n h·ªìi RapidAPI kh√¥ng ch·ª©a URL - {data}")
                        else:
                            print(f"{Fore.RED}L·ªói RapidAPI: M√£ tr·∫°ng th√°i {response.status_code} - {response.text}")

                    # N·∫øu c·∫£ y2mate v√† RapidAPI th·∫•t b·∫°i, d√πng yt-dlp
                    if not mp3_url:
                        print(f"{Fore.YELLOW}Th·ª≠ yt-dlp v√¨ c√°c API th·∫•t b·∫°i")
                        file_path = download_mp3(video_id, thread_id, thread_type, client)
                        if file_path and os.path.exists(file_path):
                            mp3_url = f"file://{file_path}"  # Gi·∫£ ƒë·ªãnh sendRemoteVoice h·ªó tr·ª£ file c·ª•c b·ªô
                            file_size = os.path.getsize(file_path)
                        else:
                            client.send(Message(text="L·ªói: Kh√¥ng th·ªÉ t·∫£i MP3 b·∫±ng yt-dlp."), thread_id, thread_type)
                            return True

                    # L·∫•y k√≠ch th∆∞·ªõc file n·∫øu ch∆∞a c√≥
                    if not file_size:
                        head_response = session.head(mp3_url, timeout=5)
                        if not head_response.headers.get('Content-Length'):
                            client.send(Message(text="L·ªói: Kh√¥ng th·ªÉ l·∫•y k√≠ch th∆∞·ªõc file MP3."), thread_id, thread_type)
                            print(f"{Fore.RED}L·ªói: Kh√¥ng c√≥ Content-Length trong ph·∫£n h·ªìi HEAD")
                            return True
                        file_size = int(head_response.headers.get('Content-Length', 0))

                    # G·ª≠i file MP3 b·∫±ng sendRemoteVoice
                    youtube_link = f"https://www.youtube.com/watch?v={video_id}"
                    try:
                        client.sendRemoteVoice(
                            voiceUrl=mp3_url,
                            thread_id=thread_id,
                            thread_type=thread_type,
                            fileSize=file_size
                        )
                        client.send(
                            Message(text=f"ƒê√£ g·ª≠i MP3: {title}\nLink YouTube: {youtube_link}"),
                            thread_id,
                            thread_type
                        )
                        # X√≥a file c·ª•c b·ªô n·∫øu d√πng yt-dlp
                        if mp3_url.startswith('file://'):
                            os.remove(file_path)
                    except ZaloAPIException as e:
                        client.send(
                            Message(text=f"L·ªói g·ª≠i tin nh·∫Øn tho·∫°i: {str(e)}\nLink YouTube: {youtube_link}"),
                            thread_id,
                            thread_type
                        )
                        print(f"{Fore.RED}L·ªói sendRemoteVoice: {e}")
                    del client.waiting_for_selection[thread_id]
                else:
                    client.send(Message(text="L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! G·ª≠i s·ªë t·ª´ 1 ƒë·∫øn 5."), thread_id, thread_type)
                return True
            except ValueError:
                client.send(Message(text="Vui l√≤ng g·ª≠i s·ªë h·ª£p l·ªá (1-5)!"), thread_id, thread_type)
                return True
            except Exception as e:
                client.send(Message(text=f"L·ªói x·ª≠ l√Ω MP3: {str(e)}"), thread_id, thread_type)
                print(f"{Fore.RED}L·ªói x·ª≠ l√Ω MP3: {e}")
                return True
    return False